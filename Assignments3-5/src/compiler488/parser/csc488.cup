// Package and import specifications section.

package compiler488.parser;

import java_cup.runtime.*;      // Must always import this.

import compiler488.parser.sym;  // cup generated symbols

// type
import compiler488.ast.type.BooleanType;
import compiler488.ast.type.IntegerType;
import compiler488.ast.type.Type;

// decl
import compiler488.ast.decl.ArrayDeclPart;  
import compiler488.ast.decl.DeclarationPart;    
import compiler488.ast.decl.RoutineBody;  
import compiler488.ast.decl.ScalarDecl;
import compiler488.ast.decl.Declaration;    
import compiler488.ast.decl.MultiDeclarations;  
import compiler488.ast.decl.RoutineDecl;  
import compiler488.ast.decl.ScalarDeclPart;

// stmt
import compiler488.ast.stmt.AssignStmt;   
import compiler488.ast.stmt.ProcedureCallStmt;  
import compiler488.ast.stmt.ReturnStmt;   
import compiler488.ast.stmt.WriteStmt;
import compiler488.ast.stmt.ExitStmt;     
import compiler488.ast.stmt.Program;           
import compiler488.ast.stmt.Scope;
import compiler488.ast.stmt.IfStmt;       
import compiler488.ast.stmt.ReadStmt;           
import compiler488.ast.stmt.Stmt;
import compiler488.ast.stmt.LoopingStmt;  
import compiler488.ast.stmt.RepeatUntilStmt;    
import compiler488.ast.stmt.WhileDoStmt;

// expn
import compiler488.ast.expn.ArithExpn;        
import compiler488.ast.expn.ConstExpn;         
import compiler488.ast.expn.NotExpn;
import compiler488.ast.expn.BinaryExpn;       
import compiler488.ast.expn.EqualsExpn;        
import compiler488.ast.expn.SkipConstExpn;
import compiler488.ast.expn.BoolConstExpn;    
import compiler488.ast.expn.Expn;              
import compiler488.ast.expn.SubsExpn;
import compiler488.ast.expn.BoolExpn;         
import compiler488.ast.expn.FunctionCallExpn;  
import compiler488.ast.expn.TextConstExpn;
import compiler488.ast.expn.CompareExpn;      
import compiler488.ast.expn.IdentExpn;         
import compiler488.ast.expn.UnaryExpn;
import compiler488.ast.expn.ConditionalExpn;  
import compiler488.ast.expn.IntConstExpn;      
import compiler488.ast.expn.UnaryMinusExpn;

// ast
import compiler488.ast.ASTList;
import compiler488.ast.Printable;
import compiler488.ast.Readable;


/* User code components 1: action code components.
 * Code to be used inside the actions triggered when productions are matched.
 * If any common code is needed for more than one action , put it here.
 */

// action code {:
// your code goes HERE
//:};

/* User code components 2: parser code components. 
 * Modifications to the default generated parser
 */
parser code {:

    String lastError;
    
    /* Override the report_error method so it will display the line and
     * column of where the error occurred in the input as well as the
     * reason for the error which is passed into the method in the
     * String 'message'.
     * @param message  error message to print
     * @param info     symbol containing line/column numbers
     */
    public void report_error(String message, Object info) {    
    String st =  "Error";
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            /* s.left is supposed to hold the line number of the error.
             * s.right is supposed to hold the column number.
             * If either is < 0 the parser may have run off the end of the program
             * and a Syntax Error message without line number may be printed.
             */   
            if (s.left >= 0) {     // Check line number
                st += " in line " + (s.left + 1);
                if (s.right >= 0)  // Check column number.
                    st += ", column " + (s.right + 1);
            } else
               st += " at end of input " ;
        }
        st += ": " + message;
        System.err.println (st);
        lastError = st;
    }
   
    // Override the report_fatal_error method to use the report_error method.
    /** @throws SyntaxErrorException */
    public void report_fatal_error (String message, Object info) throws SyntaxErrorException {
        report_error (message, info);
        throw new SyntaxErrorException (lastError);
    }
   
    // version string for printing version in Main
    public static final String version = "Winter 2017" ;

:};

/* User code components 3: initialization code.
 * If you want some code to be executed before the parser asks for the first
 * token, add it here.
 */

init with {:
:};

/* User code components 4: scanner specification code.
 * If you need to override the way the parser asks the scanner for the
 * next token, put your preferred method here.  Uncomment the line following
 * this comment, replace the line after that with your code, and uncomment
 * the line after that.
 */

// scan with {:
// your code goes here
// :};

/* Symbol lists section.
 * The names of terminals and non-terminals are not allowed to be CUP
 * reserved words.  These include "code", "action", "parser", "terminal",
 * "non", "nonterminal", "init", "scan", "with", "start", "precedence",
 * "left", "right", "nonassoc", "import", and "package".
 */

// DEFINITIONS for CSC488S Source Language  Winter  2017 

// Terminals returned by the scanner with no value attached.  
terminal AND, OR, NOT, TRUE, FALSE;
terminal BOOLEAN, INTEGER, FUNCTION, PROCEDURE;
terminal DO, ELSE, EXIT, IF;
terminal READ, REPEAT, RETURN, NEWLINE, THEN, UNTIL;
terminal VAR, WHEN, WHILE, WITHX, WRITE;

// Special-character terminals, no value attached
terminal L_PAREN, R_PAREN, L_SQUARE, R_SQUARE, L_CURLEY, R_CURLEY;
terminal EQUAL, GREATER, LESS, COMMA, DOT, QUESTION, COLON;
terminal PLUS, MINUS, TIMES, DIVIDE;

// Terminals returned by the scanner with a value.
terminal String IDENT;
terminal Integer INTCONST;
terminal String TEXTCONST;

// Non-terminals that have no value.
// nonterminal xxx

nonterminal Program program;
nonterminal Scope scope;

nonterminal Stmt statement;
nonterminal ASTList<Stmt> statements;

nonterminal Declaration declaration;
nonterminal ASTList<Declaration> declarations;

nonterminal DeclarationPart variablename;
nonterminal ASTList<DeclarationPart> variablenames;

nonterminal ScalarDecl parameter;
nonterminal ASTList<ScalarDecl> parameters;

nonterminal Printable output ;
nonterminal ASTList<Printable> outputs ;
nonterminal ASTList<Readable> inputs ;

nonterminal Type type ;

nonterminal Stmt matchedStatement, unmatchedStatement ;
nonterminal Stmt procedureCall ;
nonterminal ASTList<Expn> arguments ;

nonterminal Expn expression ;
nonterminal Expn conjunction, compareExpn ;
nonterminal Expn arithExpn, term ;
nonterminal Expn primary ;
nonterminal Expn negation ;
nonterminal Expn factor ;
nonterminal Expn constant ;
nonterminal Expn variable ;

nonterminal Integer bound ;

// Non-terminals that have a value.
// nonterminal type nameList;

// PLEASE NOTE: your grammar can not use the 'precedence'
// feature of java-cup. The lines below should remain
// commented out.
//
//precedence left PLUS, MINUS;
//precedence left TIMES, DIVIDE;        // Higher precedence.
precedence left ELSE;

// The grammar section.

// This specifies the initial symbol of the grammar.
start with program;

/* Notice that sometimes the action must be inside the production rule,
 * not after it.  This is a subtle yet significant difference from YACC.
 * This is because the CUP parser is looking ahead one token.  It ALWAYS
 * reads one more token before it will act on the production.
 */

program 
        ::= scope:s
            {: RESULT = new Program(sleft, sright, s); :}
        ;

scope 
        ::= L_CURLEY:v declarations:declList statements:stmtList R_CURLEY         // scope with declarations and statements
            {: RESULT = new Scope(vleft, vright, declList, stmtList); :}
        | L_CURLEY:v statements:stmtList  R_CURLEY                                // scope with statments only
            {: RESULT = new Scope(vleft, vright, stmtList); :}
        | L_CURLEY:v  R_CURLEY                                                    // empty scope
            {: RESULT = new Scope(vleft, vright); :}
        ;

statements 
        ::= statement:s                                                         // sequence of statements
            {: RESULT = new ASTList<Stmt> (s); :}
        | statements:sList statement:s
            {: sList.addLast(s); RESULT = sList; :}
        ;

declarations 
        ::= declaration:d                                                       // sequence of declarations
            {: RESULT = new ASTList<Declaration>(d); :}
        | declarations:dList declaration:d
            {: dList.addLast(d); RESULT = dList; :}
        ;

declaration 
        ::= VAR:v variablenames:vList COLON type:t                                // declare scalar/array variables
            {: 
                if (vList.size() == 1) {
                    DeclarationPart variable = vList.first();
                    if (variable instanceof ScalarDeclPart) {
                        RESULT = new ScalarDecl(vleft, vright, variable.getName(), t);
                    } else {
                        RESULT = new MultiDeclarations(vleft, vright, vList, t);
                    }
                } else {
                    RESULT = new MultiDeclarations(vleft, vright, vList, t);
                }
            :}
        | FUNCTION:v  IDENT:i COLON type:t scope:s                                // declare function
            {: RESULT = new RoutineDecl(vleft, vright, i, t, new RoutineBody(s)); :}
        | FUNCTION:v  IDENT:i L_PAREN parameters:p R_PAREN COLON type:t scope:s
            {: RESULT = new RoutineDecl(vleft, vright, i, t, p, new RoutineBody(p, s)); :}
        | PROCEDURE:v IDENT:i scope:s                                             // declare procedure
            {: RESULT = new RoutineDecl(vleft, vright, i, new RoutineBody(s)); :}
        | PROCEDURE:v IDENT:i L_PAREN parameters:p R_PAREN scope:s
            {: RESULT = new RoutineDecl(vleft, vright, i, p, new RoutineBody(p, s)); :}
        ;

statement 
        ::= matchedStatement:s
            {: RESULT = s; :}
        | unmatchedStatement:s
            {: RESULT = s; :}
        ;

matchedStatement 
        ::= variable:var COLON EQUAL expression:expr                            // assignment statement
            {: RESULT = new AssignStmt(varleft, varright, var, expr); :}
        | IF expression:cond THEN matchedStatement:t ELSE matchedStatement:f    // if statements
            {: RESULT = new IfStmt(condleft, condright, cond, t, f); :}
        | WHILE expression:cond DO statement:body                               // while statement
            {: RESULT = new WhileDoStmt(condleft, condright, cond, body); :}
        | REPEAT statement:body UNTIL expression:cond                           // repeat statement
            {: RESULT = new RepeatUntilStmt(bodyleft, bodyright, body, cond); :}        
        | EXIT:e                                                                // exit statements
            {: RESULT = new ExitStmt(eleft, eright); :}
        | EXIT INTCONST:lvl
            {: RESULT = new ExitStmt(lvlleft, lvlright, lvl); :}
        | EXIT WHEN expression:cond
            {: RESULT = new ExitStmt(condleft, condright, cond); :}
        | EXIT INTCONST:lvl WHEN expression:cond
            {: RESULT = new ExitStmt(lvlleft, lvlright, lvl, cond); :}
        | RETURN WITHX expression:value 
            {: RESULT = new ReturnStmt(valueleft, valueright, value); :}
        | RETURN:r                                                              // return statements
            {: RESULT = new ReturnStmt(rleft, rright); :}
        | WRITE outputs:outs                                                    // input/output statments
            {: RESULT = new WriteStmt(outsleft, outsright, outs); :}
        | READ inputs:ins
            {: RESULT = new ReadStmt(insleft, insright, ins); :}
        | procedureCall:p                                                       // procedure call
            {: RESULT = p; :}
        | scope:s                                                               // embedded scope
            {: RESULT = s; :}
        ;

unmatchedStatement 
        ::= IF expression:cond THEN statement:t
            {: RESULT = new IfStmt(condleft, condright, cond, t); :}    
        | IF expression:cond THEN matchedStatement:t ELSE unmatchedStatement:f
            {: RESULT = new IfStmt(condleft, condright, cond, t, f); :}
        ;

procedureCall 
        ::= IDENT:i                                                             // call procedure with no arguments
            {: RESULT = new ProcedureCallStmt(ileft, iright, i); :}
        | IDENT:i L_PAREN arguments:args R_PAREN                                // call procedure with arguments
            {: RESULT = new ProcedureCallStmt(ileft, iright, i, args); :}
        ;

variablenames ::= variablename:v                                                // list of variables being declared
            {: RESULT = new ASTList<DeclarationPart>( v); :}
        | variablenames:vList COMMA variablename:v 
            {: vList.addLast(v); RESULT = vList; :}
        ;

variablename 
        ::= IDENT:i                                                             // scalar variable
            {: RESULT = new ScalarDeclPart(ileft, iright, i); :}
        | IDENT:i L_SQUARE INTCONST:size R_SQUARE                               // array variable with upper bound
            {: RESULT = new ArrayDeclPart(ileft, iright, i, size); :}
        | IDENT:i L_SQUARE bound:lb DOT DOT bound:ub  R_SQUARE                  // array variable with upper/lower bounds
            {: RESULT = new ArrayDeclPart(ileft, iright, i, lb, ub); :}
        ;

type 
        ::= INTEGER:i                                                           // integer type
            {: RESULT = new IntegerType(ileft, iright); :}
        | BOOLEAN:i                                                             // boolean type
            {: RESULT = new BooleanType(ileft, iright); :}
        ;

outputs 
        ::= output:out
            {: RESULT = new ASTList<Printable> (out); :}
        | outputs:outList COMMA output:out
            {: outList.addLast(out); RESULT = outList; :}
        ;

output 
        ::= expression:expr                                                     // integer expression
            {: RESULT = expr; :}
        | TEXTCONST:text                                                        // text constant
            {: RESULT = new TextConstExpn(textleft, textright, text); :}
        | NEWLINE:n                                                             // newline constant
            {: RESULT = new SkipConstExpn(nleft, nright); :}
        ;

inputs 
        ::= variable:in                                                         // list of variables being read into
            {: RESULT = new ASTList<Readable> ((Readable) in); :}
        | inputs:inList COMMA variable:in
            {: inList.addLast((Readable) in); RESULT = inList; :}
        ;

arguments 
        ::= expression:exp                                                      // list of function/procedure arguments
            {: RESULT = new ASTList<Expn> (exp); :}
        | arguments:aList COMMA expression:exp
            {: aList.addLast(exp); RESULT = aList; :}
        ;

parameters 
        ::= parameter:p                                                         // list of function/procedure formal parameters
              {: RESULT = new ASTList<ScalarDecl> (p); :}
        | parameters:pList COMMA parameter:p
              {: pList.addLast(p); RESULT = pList; :}
        ;

parameter 
        ::= IDENT:param COLON type:t                                            // declare one parameter
            {: RESULT = new ScalarDecl(paramleft, paramright, param, t); :}
        ;


expression 
        ::= conjunction:exp                                                     // disjunctions, associate left-to-right
            {: RESULT = exp; :}
        | expression:left OR conjunction:right
            {: RESULT = new BoolExpn(leftleft, leftright, left, right, "or"); :}
        ;

conjunction 
        ::= negation:exp                                                        // conjunctions, associate left-to-right
            {: RESULT = exp; :}
        | conjunction:left AND negation:right
            {: RESULT = new BoolExpn(leftleft, leftright, left, right, "and"); :}
        ;

negation 
        ::= compareExpn:exp                                                     // negations
            {: RESULT = exp; :}
        | NOT negation:exp
            {: RESULT = new NotExpn(expleft, expright, exp, "not"); :}
        ;

compareExpn 
        ::= arithExpn:exp                                                       // comparisons, do not associate
            {: RESULT = exp; :}
        | arithExpn:left EQUAL arithExpn:right
            {: RESULT = new EqualsExpn(leftleft, leftright, left, right, "="); :}
        | arithExpn:left NOT EQUAL arithExpn:right
            {: RESULT = new EqualsExpn(leftleft, leftright, left, right, "not ="); :}
        | arithExpn:left LESS arithExpn:right
            {: RESULT = new CompareExpn(leftleft, leftright, left, right, "<"); :}
        | arithExpn:left LESS EQUAL arithExpn:right
            {: RESULT = new CompareExpn(leftleft, leftright, left, right, "<="); :}
        | arithExpn:left GREATER arithExpn:right
            {: RESULT = new CompareExpn(leftleft, leftright, left, right, ">"); :}
        | arithExpn:left GREATER EQUAL arithExpn:right
            {: RESULT = new CompareExpn(leftleft, leftright, left, right, ">="); :}
        ;

arithExpn ::= term:t                                                            // expressions, associate + , - left-to-right
            {: RESULT = t; :}
        | arithExpn:left PLUS term:right
            {: RESULT = new ArithExpn(leftleft, leftright, left, right, "+"); :}
        | arithExpn:left MINUS term:right
            {: RESULT = new ArithExpn(leftleft, leftright, left, right, "-"); :}
        ;

term 
        ::= factor:f                                                            // terms, associate * , /   left-to-right
            {: RESULT = f; :}
        | term:left TIMES factor:right
            {: RESULT = new ArithExpn(leftleft, leftright, left, right, "*"); :}
        | term:left DIVIDE factor:right
            {: RESULT = new ArithExpn(leftleft, leftright, left, right, "/"); :}
        ;

factor 
        ::= primary:exp                                                         // unary minus
            {: RESULT = exp; :}
        | MINUS factor:exp
            {: RESULT = new UnaryMinusExpn(expleft, expright, exp, "-"); :}
        ;

primary 
        ::= constant:c                                                          // integer or boolean constant
            {: RESULT = c; :}
        | variable:v       
            {: RESULT = v; :}                                                   // scalar, array variable or function call
        | IDENT:i L_PAREN arguments:a R_PAREN                                   // function call
            {: RESULT = new FunctionCallExpn(ileft, iright, i, a); :}
        | L_PAREN  expression:exp  R_PAREN                                      // parenthesized expression
            {: RESULT = exp; :}
        | L_PAREN  expression:cond QUESTION expression:tVal COLON expression:fVal R_PAREN
            {: RESULT = new ConditionalExpn(condleft, condright, cond, tVal, fVal); :}
        ;

constant 
        ::= INTCONST:v                                                          // integer constant
            {: RESULT = new IntConstExpn(vleft, vright, v); :}
        | TRUE:t                                                                // constant true
            {: RESULT = new BoolConstExpn(tleft, tright, true); :}
        | FALSE:f                                                               // constant false
            {: RESULT = new BoolConstExpn(fleft, fright, false); :}
        ;

variable 
        ::= IDENT:i                                                             // scalar variable or function call
            {: RESULT = new IdentExpn(ileft, iright, i); :}
        | IDENT:i L_SQUARE expression:exp R_SQUARE                              // element of an array
            {: RESULT = new SubsExpn(ileft, iright, i, exp); :}
        ;

bound       ::= INTCONST:i                                                      // positive array bound
            {: RESULT = i; :}
        |   MINUS INTCONST:i                                                    // negative array bound
            {: RESULT = -i; :}
        ;